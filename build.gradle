// If your build script needs to use external libraries, you can add them to the scriptâ€™s classpath in the build script
// itself. You do this using the buildscript() method, passing in a block which declares the build script classpath.
//
// https://docs.gradle.org/current/userguide/dependency_management.html

buildscript {
    repositories {
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"
        classpath "org.grails.plugins:hibernate5:7.1.0"
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    }
}

// The plugins DSL provides a succinct and convenient way to declare plugin dependencies. It works with the Gradle
// plugin portal to provide easy access to both core and community plugins. The plugins DSL block configures an instance
// of PluginDependenciesSpec.
//
// https://docs.gradle.org/current/userguide/plugins.html

plugins {
    id 'com.diffplug.spotless' version '5.11.1'
    id 'war'
}

// With the introduction of the plugins DSL, users should have little reason to use the legacy method of applying
// plugins. It is documented here in case a build author cannot use the plugins DSL due to restrictions in how it
// currently works.
//
// https://docs.gradle.org/current/userguide/plugins.html

apply plugin: 'org.grails.grails-web' // web must appear before gsp; otherwise, controllers fail to redirect to views.
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'com.github.erdi.webdriver-binaries'
apply plugin: 'com.bertramlabs.asset-pipeline' // asset-pipeline must appear after web; otherwise, the system fails to find a property.

// Maven coordinates.

version '1.0'
group 'edu.gatech.gtri.trustmark.trpt'

// https://docs.gradle.org/current/userguide/declaring_repositories.html

repositories {
    maven { url 'https://repo.grails.org/grails/core' }
    mavenCentral()
    mavenLocal()
}

// https://docs.gradle.org/current/userguide/dependency_management.html

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    all {
        exclude group: 'pull-parser', module: 'pull-parser' // this transitive dependency prompts xml parsing errors in spring
    }
}

dependencies {
    implementation 'edu.gatech.gtri.trustmark:tf-api-impl:1.4.30'
    implementation 'edu.gatech.gtri.trustmark:tf-api:1.4.21'

    implementation 'org.grails.plugins:async'
    implementation 'org.grails.plugins:cache'
    implementation 'org.grails.plugins:events'
    implementation 'org.grails.plugins:gsp'
    implementation 'org.grails.plugins:hibernate5'
    implementation 'org.grails.plugins:quartz:2.0.13' // required for quartz scheduler
    implementation 'org.grails.plugins:scaffolding'
    implementation 'org.grails.plugins:spring-security-core:4.0.3'
    implementation 'org.grails:grails-core'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails:grails-plugin-rest'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails:grails-plugin-url-mappings'
    implementation 'org.grails:grails-web-boot'

    implementation 'org.hibernate:hibernate-core:5.5.7.Final'
    implementation 'org.hibernate:hibernate-ehcache:5.5.7.Final'

    implementation 'org.quartz-scheduler:quartz:2.2.1' // required for quartz scheduler

    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.gtri.functionaljava:functionaljava:4.10.1-GTRI'

    implementation 'javax.el:javax.el-api:2.2.4'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.4'

    compileOnly 'io.micronaut:micronaut-inject-groovy'

    console 'org.grails:grails-console'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    profile 'org.grails.profiles:web'

    runtimeOnly 'com.bertramlabs.plugins:asset-pipeline-grails:3.3.4'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'
    runtimeOnly 'org.apache.tomcat:tomcat-jdbc'
    runtimeOnly 'org.glassfish.web:el-impl:2.2.1-b05'

    runtimeOnly 'mysql:mysql-connector-java:8.0.24'

    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails.plugins:geb'
    testImplementation 'org.grails:grails-gorm-testing-support'
    testImplementation 'org.grails:grails-web-testing-support'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.seleniumhq.selenium:selenium-api:3.141.59'
    testImplementation 'org.seleniumhq.selenium:selenium-remote-driver:3.141.59'
    testImplementation 'org.seleniumhq.selenium:selenium-support:3.141.59'

    testRuntimeOnly 'org.seleniumhq.selenium:selenium-chrome-driver:3.141.59'
    testRuntimeOnly 'org.seleniumhq.selenium:selenium-firefox-driver:3.141.59'
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

assets {
    minifyJs = false
    minifyCss = true
}

spotless {
    groovy {
        target '*.groovy'
        importOrder('java', 'javax', '')

        greclipse('4.17.0').configFile('eclipse-formatter-config.xml')
    }
    groovyGradle {
        target '*.gradle'

        importOrder('java', 'javax', 'groovy', '')
        greclipse('4.17.0').configFile('eclipse-formatter-config.xml')
    }
    java {
        target '*.java'
        importOrder('java', 'javax', '')

        eclipse('4.18.0').configFile('eclipse-formatter-config.xml')
    }
}

compileGroovy.dependsOn spotlessApply
compileJava.dependsOn spotlessApply

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.24.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}
