// If your build script needs to use external libraries, you can add them to the scriptâ€™s classpath in the build script
// itself. You do this using the buildscript() method, passing in a block which declares the build script classpath.
//
// https://docs.gradle.org/current/userguide/dependency_management.html

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }

        //        gradle versions plugin
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:8.0.0"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.7"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:4.4.0"

        //        gradle versions plugin
        classpath "com.github.ben-manes:gradle-versions-plugin:0.51.0"
    }
}

// The plugins DSL provides a succinct and convenient way to declare plugin dependencies. It works with the Gradle
// plugin portal to provide easy access to both core and community plugins. The plugins DSL block configures an instance
// of PluginDependenciesSpec.
//
// https://docs.gradle.org/current/userguide/plugins.html

plugins {
    id "com.diffplug.spotless" version "6.16.0"
    id "com.github.ben-manes.versions" version "0.51.0"
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
    id "war"
    id 'org.springframework.boot' version '2.7.18'
}

// Maven coordinates.
// These must appear before "apply plugin" for version to appear in grails.build.info.

version "$trptVersion"
group "edu.gatech.gtri.trustmark.trpt"

// With the introduction of the plugins DSL, users should have little reason to use the legacy method of applying
// plugins. It is documented here in case a build author cannot use the plugins DSL due to restrictions in how it
// currently works.
//
// https://docs.gradle.org/current/userguide/plugins.html

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web" // web must appear before gsp; otherwise, controllers fail to redirect to views.
apply plugin: "com.github.erdi.webdriver-binaries"
apply plugin: "com.bertramlabs.asset-pipeline" // asset-pipeline must appear after web; otherwise, the system fails to find a property.
apply plugin: "org.grails.grails-gsp"

// gradle versions plugin
apply plugin: "com.github.ben-manes.versions"

// ICL Artifactory Metadata
ext {
    artifactoryBaseUrl = 'https://artifactory.icl.gtri.org:443/artifactory/'
    artifactoryTrustmarkMavenReleaseRepoUrl = "$artifactoryBaseUrl" + "trustmark-maven"
    artifactoryExternalReleaseRepoUrl = "$artifactoryBaseUrl" + "external"
    artifactoryProxiedReleaseRepoUrl = "$artifactoryBaseUrl" + "proxied"
}

def iclArtifactoryUsername = System.getenv('ICL_ARTIFACTORY_USERNAME')
if (!iclArtifactoryUsername?.trim()) {
    iclArtifactoryUsername = project.properties['artifactoryUsername']
}

def iclArtifactoryPassword = System.getenv('ICL_ARTIFACTORY_PASSWORD')
if (!iclArtifactoryPassword?.trim()) {
    iclArtifactoryPassword = project.properties['artifactoryPassword']
}

// https://docs.gradle.org/current/userguide/declaring_repositories.html

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    mavenCentral()
    mavenLocal()

    maven {
        name 'proxied'
        url artifactoryProxiedReleaseRepoUrl
        credentials {
            username iclArtifactoryUsername
            password iclArtifactoryPassword
        }
    }
    maven {
        name 'central'
        url artifactoryTrustmarkMavenReleaseRepoUrl

        credentials {
            username = iclArtifactoryUsername
            password = iclArtifactoryPassword
        }
    }
    maven {
        name 'icl-central'
        url artifactoryExternalReleaseRepoUrl

        credentials {
            username = iclArtifactoryUsername
            password = iclArtifactoryPassword
        }
    }
}

// https://docs.gradle.org/current/userguide/dependency_management.html

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    all {
        exclude group: "pull-parser", module: "pull-parser" // this transitive dependency prompts xml parsing errors in spring
    }
}

dependencies {
    implementation "edu.gatech.gtri.trustmark:tf-api-impl:1.4.74"
    implementation "edu.gatech.gtri.trustmark:tf-api:1.4.46"
    implementation "edu.gatech.gtri.trustmark:tf-grails-shared-views:0.9.5"

    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"

    implementation "org.springframework.security:spring-security-taglibs:5.8.4"
    runtimeOnly "javax.servlet.jsp:javax.servlet.jsp-api:2.3.3"

    compileOnly "io.micronaut:micronaut-inject-groovy:3.10.4"
    console "org.grails:grails-console"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    implementation "com.fasterxml.jackson.core:jackson-core:2.17.1"
    implementation "javax.el:javax.el-api:3.0.0"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp:5.3.0"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.grails.plugins:quartz:2.0.13" // required for quartz scheduler
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails:grails-core"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-web-boot"
    implementation "org.gtri.functionaljava:functionaljava:4.10.1-GTRI"
    implementation "org.hibernate:hibernate-core:5.6.15.Final"
    implementation "org.hibernate:hibernate-ehcache:5.6.15.Final"
    implementation "org.quartz-scheduler:quartz:2.3.2" // required for quartz scheduler
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-webflux:2.7.14"
    implementation "org.springframework.retry:spring-retry:2.0.5" // required for spring retry
    profile "org.grails.profiles:web"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:4.3.0"
    runtimeOnly "javax.xml.bind:jaxb-api:2.4.0-b180830.0359"
    runtimeOnly "mysql:mysql-connector-java:8.0.33"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc:10.1.23"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "org.springframework.boot:spring-boot-starter-aop:2.7.14" // required for spring retry
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

tasks.withType(War).configureEach { War war ->
    war.dependsOn compileGroovyPages
}

war {
    enabled=true
    baseName = "trpt"
}

bootWar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    enabled = true
    dependsOn compileGroovyPages
}

bootRun {
    environment "SPRING_BOOT_CONTEXT_PATH", "/trpt"
    environment "SPRING_SECURITY_CLIENT_ID", "trpt"
    environment "SPRING_SECURITY_REDIRECT_URI", "http://localhost:8080/trpt/login/oauth2/code/trpt"
    environment "SPRING_SECURITY_ISSUER_URI", "https://host.docker.internal:9443/auth/realms/keycloak"
    environment "OPENID_CONNECT_SCOPE", "openid"

    ignoreExitValue true
    jvmArgs(
            "-Dspring.output.ansi.enabled=always",
            "-noverify",
            "-Xmx1g",
            "-Djavax.net.ssl.trustStore=grails-app/conf/trpt-truststore.jks",
            "-Djavax.net.ssl.trustStorePassword=changeit"
            )
    sourceResources sourceSets.main
    String springProfilesActive = "spring.profiles.active"
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

assets {
    minifyJs = false
    minifyCss = true
}

spotless {
    groovy {
        target "*.groovy"
        importOrder("java", "javax", "")

        greclipse("4.17.0").configFile("eclipse-formatter-config.xml")
    }
    groovyGradle {
        target "*.gradle"

        importOrder("java", "javax", "groovy", "")
        greclipse("4.17.0").configFile("eclipse-formatter-config.xml")
    }
    java {
        target "*.java"
        importOrder("java", "javax", "")

        eclipse("4.18.0").configFile("eclipse-formatter-config.xml")
    }
}

compileGroovy.dependsOn spotlessApply
compileJava.dependsOn spotlessApply

tasks.withType(Test) {
    useJUnitPlatform()
}

gitProperties {
    keys = [
        "git.commit.id.abbrev",
        "git.commit.id",
        "git.commit.time"
    ]
}

apply plugin: "maven-publish"

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "edu.gatech.gtri.trustmark"
            artifactId = "trpt"
            version = "$trptVersion"

            from components.web
        }
    }

    repositories {
        maven {
            name 'central'
            url artifactoryTrustmarkMavenReleaseRepoUrl

            credentials {
                username = iclArtifactoryUsername
                password = iclArtifactoryPassword
            }
        }
    }
}

assets {
    packagePlugin = true
}